import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime
import matplotlib.pyplot as plt
import io
from shapely.geometry import Polygon
import math

# Import utils
from utils.gee_utils import initialize_earth_engine, get_sentinel2_image, extract_satellite_values
from utils.mapping_utils import create_interactive_map
from utils.analysis_utils import calculate_area, divide_pasture

# Import st_folium
from streamlit_folium import st_folium

# Page config
st.set_page_config(page_title="üå± Analizador Forrajero GEE", layout="wide")
st.title("üå± ANALIZADOR FORRAJERO - METODOLOG√çA GEE")
st.markdown("---")

# Initialize session state
if 'analysis_done' not in st.session_state:
    st.session_state.analysis_done = False
if 'gdf_dividido' not in st.session_state:
    st.session_state.gdf_dividido = None
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    tipo_pastura = st.selectbox("Tipo de Pastura:", 
                               ["ALFALFA", "RAYGRASS", "FESTUCA", "AGROPIRRO", "PASTIZAL_NATURAL", "PERSONALIZADO"])
    
    st.subheader("üìä Par√°metros Ganaderos")
    peso_promedio = st.slider("Peso promedio animal (kg):", 300, 600, 450)
    carga_animal = st.slider("Carga animal (cabezas):", 50, 1000, 100)
    
    st.subheader("üéØ Divisi√≥n de Potrero")
    n_divisiones = st.slider("N√∫mero de sub-lotes:", min_value=12, max_value=32, value=24)
    
    st.subheader("üõ∞Ô∏è Configuraci√≥n Satelital")
    fecha_inicio = st.date_input("Fecha inicio an√°lisis", value=datetime(2024, 1, 1))
    fecha_fin = st.date_input("Fecha fin an√°lisis", value=datetime(2024, 12, 31))
    nubosidad_maxima = st.slider("Nubosidad m√°xima (%)", 0, 50, 20)
    
    st.subheader("üì§ Subir Lote")
    uploaded_zip = st.file_uploader("Subir ZIP con shapefile del potrero", type=['zip'])

    # Bot√≥n para limpiar an√°lisis
    if st.button("üîÑ Limpiar An√°lisis"):
        st.session_state.analysis_done = False
        st.session_state.gdf_dividido = None
        st.session_state.analysis_results = None
        st.rerun()

# Funci√≥n para simular an√°lisis forrajero (temporal)
def simular_analisis_forrajero(gdf_dividido, tipo_pastura):
    """Simula el an√°lisis forrajero - reemplazar con tu l√≥gica real"""
    resultados = []
    for i in range(len(gdf_dividido)):
        # Simular datos basados en el tipo de pastura
        if tipo_pastura == "ALFALFA":
            biomasa_base = np.random.uniform(600, 1200)
        elif tipo_pastura == "RAYGRASS":
            biomasa_base = np.random.uniform(500, 1000)
        elif tipo_pastura == "FESTUCA":
            biomasa_base = np.random.uniform(400, 800)
        else:
            biomasa_base = np.random.uniform(300, 700)
        
        resultados.append({
            'biomasa_disponible_kg_ms_ha': biomasa_base,
            'ndvi': np.random.uniform(0.3, 0.8),
            'evi': np.random.uniform(0.2, 0.7),
            'savi': np.random.uniform(0.25, 0.75),
            'cobertura_vegetal': np.random.uniform(0.4, 0.9),
            'tipo_superficie': np.random.choice(['VEGETACION_DENSA', 'VEGETACION_MODERADA', 'VEGETACION_ESCASA']),
            'crecimiento_diario': np.random.uniform(20, 80),
            'factor_calidad': np.random.uniform(0.5, 0.9)
        })
    return resultados

# Main application
if uploaded_zip:
    with st.spinner("Cargando potrero..."):
        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                    zip_ref.extractall(tmp_dir)
                
                shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                if shp_files:
                    shp_path = os.path.join(tmp_dir, shp_files[0])
                    gdf = gpd.read_file(shp_path)
                    
                    st.success(f"‚úÖ **Potrero cargado:** {len(gdf)} pol√≠gono(s)")
                    
                    area_total = calculate_area(gdf).sum()
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**üìä INFORMACI√ìN DEL POTRERO:**")
                        st.write(f"- Pol√≠gonos: {len(gdf)}")
                        st.write(f"- √Årea total: {area_total:.1f} ha")
                        st.write(f"- CRS: {gdf.crs}")
                    
                    with col2:
                        st.write("**üéØ CONFIGURACI√ìN:**")
                        st.write(f"- Pastura: {tipo_pastura}")
                        st.write(f"- Per√≠odo: {fecha_inicio} a {fecha_fin}")
                        st.write(f"- Sub-lotes: {n_divisiones}")
                    
                    # Solo ejecutar an√°lisis si no se ha hecho antes o si se solicita expl√≠citamente
                    if not st.session_state.analysis_done:
                        if st.button("üöÄ EJECUTAR AN√ÅLISIS FORRAJERO", type="primary"):
                            
                            # Paso 1: Dividir potrero
                            st.subheader("üìê DIVIDIENDO POTRERO")
                            gdf_dividido = divide_pasture(gdf, n_divisiones)
                            st.session_state.gdf_dividido = gdf_dividido
                            st.success(f"‚úÖ Potrero dividido en {len(gdf_dividido)} sub-lotes")
                            
                            # Paso 2: Simular an√°lisis
                            st.subheader("üåø CALCULANDO √çNDICES FORRAJEROS")
                            with st.spinner("Ejecutando an√°lisis..."):
                                analysis_results = simular_analisis_forrajero(gdf_dividido, tipo_pastura)
                                st.session_state.analysis_results = analysis_results
                            
                            st.session_state.analysis_done = True
                            st.success("‚úÖ An√°lisis completado")
                            st.rerun()
                    
                    # Mostrar resultados si el an√°lisis est√° hecho
                    if st.session_state.analysis_done and st.session_state.gdf_dividido is not None:
                        
                        # Mostrar mapa interactivo
                        st.subheader("üó∫Ô∏è MAPA INTERACTIVO DEL POTRERO")
                        
                        # Crear mapa
                        mapa = create_interactive_map(
                            st.session_state.gdf_dividido, 
                            None,  # No image for now
                            tipo_pastura, 
                            st.session_state.analysis_results
                        )
                        
                        # Mostrar mapa con st_folium
                        if mapa:
                            st_data = st_folium(
                                mapa, 
                                width=1200, 
                                height=600,
                                key="main_map"
                            )
                        
                        # Mostrar resumen de resultados
                        st.subheader("üìä RESUMEN DE RESULTADOS")
                        
                        # Calcular estad√≠sticas
                        biomasas = [r['biomasa_disponible_kg_ms_ha'] for r in st.session_state.analysis_results]
                        ndvis = [r['ndvi'] for r in st.session_state.analysis_results]
                        
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("Biomasa Promedio", f"{np.mean(biomasas):.0f} kg MS/ha")
                        with col2:
                            st.metric("NDVI Promedio", f"{np.mean(ndvis):.3f}")
                        with col3:
                            st.metric("Sub-lotes Analizados", len(st.session_state.gdf_dividido))
                        with col4:
                            # Calcular categor√≠as
                            categorias = {}
                            for result in st.session_state.analysis_results:
                                cat = result['tipo_superficie']
                                categorias[cat] = categorias.get(cat, 0) + 1
                            cat_principal = max(categorias, key=categorias.get)
                            st.metric("Categor√≠a Principal", cat_principal)
                        
                        # Tabla de resultados detallados
                        st.subheader("üìã DETALLE POR SUB-LOTE")
                        
                        # Crear DataFrame para mostrar
                        df_resultados = pd.DataFrame({
                            'Sub-Lote': range(1, len(st.session_state.analysis_results) + 1),
                            'Biomasa (kg MS/ha)': [r['biomasa_disponible_kg_ms_ha'] for r in st.session_state.analysis_results],
                            'NDVI': [r['ndvi'] for r in st.session_state.analysis_results],
                            'Cobertura': [r['cobertura_vegetal'] for r in st.session_state.analysis_results],
                            'Tipo Superficie': [r['tipo_superficie'] for r in st.session_state.analysis_results],
                            'Crecimiento (kg/d√≠a)': [r['crecimiento_diario'] for r in st.session_state.analysis_results]
                        })
                        
                        st.dataframe(df_resultados, use_container_width=True)
                        
                        # Gr√°fico de distribuci√≥n de biomasa
                        st.subheader("üìà DISTRIBUCI√ìN DE BIOMASA")
                        fig, ax = plt.subplots(figsize=(10, 6))
                        ax.hist(biomasas, bins=10, alpha=0.7, color='green', edgecolor='black')
                        ax.set_xlabel('Biomasa (kg MS/ha)')
                        ax.set_ylabel('N√∫mero de Sub-lotes')
                        ax.set_title('Distribuci√≥n de Biomasa por Sub-lote')
                        ax.grid(True, alpha=0.3)
                        st.pyplot(fig)
                        
                        # Informaci√≥n adicional
                        st.subheader("üîç INFORMACI√ìN T√âCNICA")
                        with st.expander("Ver detalles t√©cnicos"):
                            st.markdown(f"""
                            **Par√°metros utilizados:**
                            - Tipo de pastura: {tipo_pastura}
                            - Per√≠odo de an√°lisis: {fecha_inicio} a {fecha_fin}
                            - Nubosidad m√°xima: {nubosidad_maxima}%
                            - Peso promedio animal: {peso_promedio} kg
                            - Carga animal: {carga_animal} cabezas
                            
                            **M√©tricas calculadas:**
                            - Biomasa disponible (kg MS/ha)
                            - √çndices de vegetaci√≥n (NDVI, EVI, SAVI)
                            - Cobertura vegetal (%)
                            - Tipo de superficie
                            - Crecimiento diario estimado
                            """)
                        
        except Exception as e:
            st.error(f"Error cargando shapefile: {str(e)}")

else:
    st.info("üìÅ Sube el ZIP de tu potrero para comenzar el an√°lisis forrajero")
    
    # Informaci√≥n de la aplicaci√≥n
    with st.expander("‚ÑπÔ∏è INFORMACI√ìN DE LA APLICACI√ìN"):
        st.markdown("""
        **üå± SISTEMA DE AN√ÅLISIS FORRAJERO**
        
        **Funcionalidades:**
        - üó∫Ô∏è Visualizaci√≥n interactiva de potreros
        - üìä An√°lisis de biomasa y productividad
        - üåø C√°lculo de √≠ndices de vegetaci√≥n
        - üêÑ Estimaci√≥n de capacidad ganadera
        - üõ∞Ô∏è Preparado para integraci√≥n con Sentinel-2
        
        **Caracter√≠sticas t√©cnicas:**
        - Mapa interactivo con Google Satellite
        - Divisi√≥n autom√°tica en sub-lotes
        - An√°lisis espacial detallado
        - Exportaci√≥n de resultados
        
        **Instrucciones de uso:**
        1. **Prepara tu shapefile** (.shp, .shx, .dbf, .prj) en un ZIP
        2. **Configura los par√°metros** en la barra lateral
        3. **Ejecuta el an√°lisis** y visualiza los resultados
        4. **Explora el mapa interactivo** y las m√©tricas calculadas
        
        **Pr√≥ximas funcionalidades:**
        - Integraci√≥n con Google Earth Engine
        - Datos satelitales en tiempo real
        - An√°lisis hist√≥rico de productividad
        - Recomendaciones de manejo automatizadas
        """)
