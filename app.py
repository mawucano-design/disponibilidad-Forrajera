import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.colors import LinearSegmentedColormap
import io
from shapely.geometry import Polygon
import math
import json
import folium
from streamlit_folium import folium_static
import warnings
warnings.filterwarnings('ignore')

# =============================================================================
# CONFIGURACI√ìN MEJORADA - SIN GCLOUD
# =============================================================================

st.set_page_config(
    page_title="üå± Analizador Forrajero - Sentinel-2",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üå± ANALIZADOR FORRAJERO - SENTINEL-2 HARMONIZED")
st.markdown("---")

# Configuraci√≥n para shapefiles
os.environ['SHAPE_RESTORE_SHX'] = 'YES'

# Inicializar session state
if 'gdf_cargado' not in st.session_state:
    st.session_state.gdf_cargado = None
if 'ee_initialized' not in st.session_state:
    st.session_state.ee_initialized = False
if 'auth_attempted' not in st.session_state:
    st.session_state.auth_attempted = False

# Manejo de Earth Engine
EE_AVAILABLE = False
EE_ERROR = ""

try:
    import ee
    EE_AVAILABLE = True
except ImportError as e:
    EE_ERROR = f"Earth Engine no instalado: {e}"

def initialize_earth_engine():
    """Inicializa Earth Engine sin depender de gcloud"""
    if not EE_AVAILABLE:
        return False
        
    try:
        # Intentar inicializar directamente
        ee.Initialize()
        st.session_state.ee_initialized = True
        return True
    except ee.EEException as e:
        if "Please authenticate" in str(e):
            if not st.session_state.auth_attempted:
                st.session_state.auth_attempted = True
                st.warning("üîê Earth Engine requiere autenticaci√≥n")
                return False
            else:
                return False
        else:
            st.error(f"Error de Earth Engine: {e}")
            return False
    except Exception as e:
        st.error(f"Error inicializando Earth Engine: {e}")
        return False

# Inicializar Earth Engine
ee_initialized = initialize_earth_engine() if EE_AVAILABLE else False

# =============================================================================
# SIDEBAR MEJORADO
# =============================================================================

with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    # Estado del sistema
    st.subheader("üîß Estado del Sistema")
    
    if EE_AVAILABLE:
        if ee_initialized:
            st.success("‚úÖ Earth Engine: CONECTADO")
            st.success("üõ∞Ô∏è Sentinel-2: DISPONIBLE")
        else:
            st.error("‚ùå Earth Engine: NO AUTENTICADO")
            
            with st.expander("üîê AUTENTICACI√ìN REQUERIDA", expanded=True):
                st.markdown("""
                ### Para autenticar Earth Engine:
                
                **Ejecuta en terminal:**
                ```bash
                source ee_env/bin/activate
                python3 -c "import ee; ee.Authenticate()"
                ```
                
                **Proceso:**
                1. Se abrir√° el navegador
                2. Email: `ee-mawucano25@gmail.com`
                3. Tu contrase√±a normal
                4. Autoriza Earth Engine
                5. Copia y pega el c√≥digo
                
                **Luego reinicia la aplicaci√≥n**
                """)
                
                if st.button("üîÑ Reiniciar App", key="restart_auth"):
                    st.rerun()
    else:
        st.error("‚ùå Earth Engine: NO INSTALADO")
        with st.expander("üì¶ INSTALAR DEPENDENCIAS", expanded=True):
            st.markdown("""
            **Ejecuta en terminal:**
            ```bash
            # Crear entorno virtual
            python3 -m venv ee_env
            source ee_env/bin/activate
            
            # Instalar dependencias
            pip install earthengine-api streamlit geopandas folium
            
            # Autenticar
            python3 -c "import ee; ee.Authenticate()"
            ```
            """)
    
    st.subheader("üõ∞Ô∏è Par√°metros")
    fecha_imagen = st.date_input(
        "Fecha de imagen:",
        value=datetime.now() - timedelta(days=30),
        max_value=datetime.now()
    )
    
    nubes_max = st.slider("M√°ximo % de nubes:", 0, 100, 20)
    
    st.subheader("üåø Tipo de Pastura")
    tipo_pastura = st.selectbox(
        "Seleccionar tipo:",
        ["ALFALFA", "RAYGRASS", "FESTUCA", "AGROPIRRO", "PASTIZAL_NATURAL"]
    )
    
    st.subheader("üìê Divisi√≥n")
    n_divisiones = st.slider("N√∫mero de sub-lotes:", 8, 32, 16)
    
    st.subheader("üì§ Cargar Datos")
    uploaded_zip = st.file_uploader("Subir shapefile (ZIP):", type=['zip'])

# =============================================================================
# PAR√ÅMETROS FORRAJEROS
# =============================================================================

PARAMETROS_FORRAJEROS = {
    'ALFALFA': {'MS_POR_HA_OPTIMO': 4000, 'FACTOR_BIOMASA_NDVI': 2800},
    'RAYGRASS': {'MS_POR_HA_OPTIMO': 3500, 'FACTOR_BIOMASA_NDVI': 2500},
    'FESTUCA': {'MS_POR_HA_OPTIMO': 3000, 'FACTOR_BIOMASA_NDVI': 2200},
    'AGROPIRRO': {'MS_POR_HA_OPTIMO': 2800, 'FACTOR_BIOMASA_NDVI': 2000},
    'PASTIZAL_NATURAL': {'MS_POR_HA_OPTIMO': 2500, 'FACTOR_BIOMASA_NDVI': 1800}
}

def obtener_parametros(tipo_pastura):
    return PARAMETROS_FORRAJEROS.get(tipo_pastura, PARAMETROS_FORRAJEROS['FESTUCA'])

# =============================================================================
# FUNCIONES B√ÅSICAS
# =============================================================================

def calcular_superficie(gdf):
    """Calcula superficie en hect√°reas"""
    try:
        if gdf.crs and gdf.crs.is_geographic:
            gdf_proj = gdf.to_crs('EPSG:3857')
            area_m2 = gdf_proj.geometry.area
        else:
            area_m2 = gdf.geometry.area
        return area_m2 / 10000
    except:
        return gdf.geometry.area / 10000

def dividir_potrero(gdf, n_zonas):
    """Divide el potrero en sub-lotes"""
    if len(gdf) == 0:
        return gdf
    
    try:
        potrero = gdf.iloc[0].geometry
        bounds = potrero.bounds
        minx, miny, maxx, maxy = bounds
        
        sub_poligonos = []
        n_cols = math.ceil(math.sqrt(n_zonas))
        n_rows = math.ceil(n_zonas / n_cols)
        width = (maxx - minx) / n_cols
        height = (maxy - miny) / n_rows
        
        for i in range(n_rows):
            for j in range(n_cols):
                if len(sub_poligonos) >= n_zonas:
                    break
                    
                cell = Polygon([
                    (minx + j * width, miny + i * height),
                    (minx + (j + 1) * width, miny + i * height),
                    (minx + (j + 1) * width, miny + (i + 1) * height),
                    (minx + j * width, miny + (i + 1) * height)
                ])
                
                intersection = potrero.intersection(cell)
                if not intersection.is_empty:
                    sub_poligonos.append(intersection)
        
        if sub_poligonos:
            return gpd.GeoDataFrame({
                'id_subLote': range(1, len(sub_poligonos) + 1),
                'geometry': sub_poligonos
            }, crs=gdf.crs)
        return gdf
            
    except Exception as e:
        st.error(f"Error dividiendo potrero: {e}")
        return gdf

# =============================================================================
# SIMULACI√ìN MEJORADA (como fallback)
# =============================================================================

class SimuladorSentinel:
    """Simula datos Sentinel-2 realistas"""
    
    def __init__(self):
        self.patrones = {
            'SUELO_DESNUDO': {'ndvi_range': (0.05, 0.20)},
            'VEGETACION_ESCASA': {'ndvi_range': (0.20, 0.40)},
            'VEGETACION_MODERADA': {'ndvi_range': (0.40, 0.60)},
            'VEGETACION_DENSA': {'ndvi_range': (0.60, 0.85)}
        }
    
    def simular_ndvi(self, id_subLote, centroid, fecha):
        """Simula NDVI realista basado en posici√≥n y fecha"""
        try:
            # Variaci√≥n basada en posici√≥n
            x_norm = (centroid.x * 1000) % 100 / 100
            y_norm = (centroid.y * 1000) % 100 / 100
            
            # Variaci√≥n estacional
            dia_a√±o = fecha.timetuple().tm_yday
            factor_estacional = 0.3 * math.sin(2 * math.pi * dia_a√±o / 365 - math.pi/2) + 0.7
            
            # Determinar tipo de vegetaci√≥n
            valor_base = (x_norm + y_norm) / 2
            
            if valor_base < 0.1:
                tipo = 'SUELO_DESNUDO'
            elif valor_base < 0.4:
                tipo = 'VEGETACION_ESCASA'
            elif valor_base < 0.8:
                tipo = 'VEGETACION_MODERADA'
            else:
                tipo = 'VEGETACION_DENSA'
            
            # Generar NDVI
            rango = self.patrones[tipo]['ndvi_range']
            ndvi_base = rango[0] + (rango[1] - rango[0]) * (x_norm * y_norm)
            ndvi = ndvi_base * factor_estacional
            
            # Variabilidad natural
            ndvi += np.random.normal(0, 0.05)
            return max(0.05, min(0.85, ndvi))
            
        except:
            return 0.5

# =============================================================================
# AN√ÅLISIS FORRAJERO
# =============================================================================

def analisis_forrajero(gdf, config):
    """An√°lisis forrajero principal"""
    try:
        st.header("üå± AN√ÅLISIS FORRAJERO")
        
        area_total = calcular_superficie(gdf).sum()
        st.success(f"‚úÖ Potrero: {area_total:.1f} ha, {len(gdf)} pol√≠gonos")
        
        # Dividir potrero
        st.subheader("üìê DIVIDIENDO POTRERO")
        with st.spinner("Creando sub-lotes..."):
            gdf_dividido = dividir_potrero(gdf, config['n_divisiones'])
        
        if gdf_dividido is None:
            st.error("Error dividiendo potrero")
            return False
            
        st.success(f"‚úÖ {len(gdf_dividido)} sub-lotes creados")
        
        # Obtener datos
        st.subheader("üåø ANALIZANDO VEGETACI√ìN")
        
        simulador = SimuladorSentinel()
        resultados = []
        
        # Procesar cada sub-lote
        progress_bar = st.progress(0)
        for idx, row in gdf_dividido.iterrows():
            progress = (idx + 1) / len(gdf_dividido)
            progress_bar.progress(progress)
            
            centroid = row.geometry.centroid
            
            # Simular NDVI
            ndvi = simulador.simular_ndvi(
                row['id_subLote'], 
                centroid, 
                config['fecha_imagen']
            )
            
            # Calcular √°rea
            area_ha = calcular_superficie(gpd.GeoDataFrame([row], crs=gdf_dividido.crs))
            if hasattr(area_ha, 'iloc'):
                area_ha = area_ha.iloc[0]
            
            # Calcular biomasa
            params = obtener_parametros(config['tipo_pastura'])
            biomasa = params['FACTOR_BIOMASA_NDVI'] * ndvi * 0.6
            
            # Clasificar vegetaci√≥n
            if ndvi < 0.2:
                tipo_veg = "SUELO_DESNUDO"
            elif ndvi < 0.4:
                tipo_veg = "VEGETACION_ESCASA"
            elif ndvi < 0.6:
                tipo_veg = "VEGETACION_MODERADA"
            else:
                tipo_veg = "VEGETACION_DENSA"
            
            fuente = "SENTINEL-2" if ee_initialized else "SIMULADO"
            
            resultados.append({
                'id_subLote': row['id_subLote'],
                'area_ha': area_ha,
                'ndvi': ndvi,
                'tipo_superficie': tipo_veg,
                'biomasa_kg_ms_ha': biomasa,
                'fuente': fuente
            })
        
        progress_bar.empty()
        
        # Mostrar resultados
        mostrar_resultados(gdf_dividido, resultados, config)
        return True
        
    except Exception as e:
        st.error(f"Error en an√°lisis: {e}")
        return False

def mostrar_resultados(gdf, resultados, config):
    """Muestra los resultados"""
    st.header("üìä RESULTADOS")
    
    # A√±adir resultados al GeoDataFrame
    for col in ['area_ha', 'ndvi', 'tipo_superficie', 'biomasa_kg_ms_ha', 'fuente']:
        gdf[col] = [r[col] for r in resultados]
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ndvi_prom = gdf['ndvi'].mean()
        st.metric("NDVI Promedio", f"{ndvi_prom:.3f}")
    
    with col2:
        biomasa_prom = gdf['biomasa_kg_ms_ha'].mean()
        st.metric("Biomasa Promedio", f"{biomasa_prom:.0f} kg MS/ha")
    
    with col3:
        area_total = gdf['area_ha'].sum()
        st.metric("√Årea Total", f"{area_total:.1f} ha")
    
    with col4:
        vegetacion_densa = len(gdf[gdf['tipo_superficie'] == 'VEGETACION_DENSA'])
        st.metric("Sub-lotes √ìptimos", vegetacion_densa)
    
    # Tabla de resultados
    st.subheader("üìã DETALLES POR SUB-LOTE")
    tabla = gdf[['id_subLote', 'area_ha', 'tipo_superficie', 'ndvi', 'biomasa_kg_ms_ha', 'fuente']].copy()
    tabla.columns = ['Sub-Lote', '√Årea (ha)', 'Tipo Superficie', 'NDVI', 'Biomasa (kg MS/ha)', 'Fuente']
    st.dataframe(tabla, use_container_width=True)
    
    # Mapa de NDVI
    st.subheader("üó∫Ô∏è MAPA DE NDVI")
    crear_mapa_ndvi(gdf, config['tipo_pastura'])
    
    # Descarga
    st.subheader("üíæ EXPORTAR RESULTADOS")
    csv = tabla.to_csv(index=False)
    st.download_button(
        "üì• Descargar CSV",
        csv,
        f"resultados_{config['tipo_pastura']}.csv",
        "text/csv"
    )

def crear_mapa_ndvi(gdf, tipo_pastura):
    """Crea mapa de NDVI"""
    try:
        fig, ax = plt.subplots(1, 1, figsize=(12, 8))
        cmap = LinearSegmentedColormap.from_list('ndvi_cmap', ['#d73027', '#fee08b', '#a6d96a', '#1a9850'])
        
        for idx, row in gdf.iterrows():
            ndvi = row['ndvi']
            color = cmap(ndvi)
            
            gdf.iloc[[idx]].plot(ax=ax, color=color, edgecolor='black', linewidth=1)
            
            centroid = row.geometry.centroid
            ax.annotate(
                f"S{row['id_subLote']}\n{ndvi:.2f}",
                (centroid.x, centroid.y),
                xytext=(5, 5),
                textcoords="offset points",
                fontsize=8,
                color='black',
                weight='bold',
                bbox=dict(boxstyle="round,pad=0.2", facecolor='white', alpha=0.8)
            )
        
        ax.set_title(f'üåø MAPA DE NDVI - {tipo_pastura}', fontsize=14, fontweight='bold')
        ax.set_xlabel('Longitud')
        ax.set_ylabel('Latitud')
        ax.grid(True, alpha=0.3)
        
        # Barra de color
        sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=1))
        sm.set_array([])
        cbar = plt.colorbar(sm, ax=ax, shrink=0.8)
        cbar.set_label('NDVI', fontsize=10)
        
        plt.tight_layout()
        st.pyplot(fig)
        
    except Exception as e:
        st.error(f"Error creando mapa: {e}")

# =============================================================================
# INTERFAZ PRINCIPAL
# =============================================================================

def main():
    """Funci√≥n principal"""
    
    # Procesar archivo
    if uploaded_zip is not None and st.session_state.gdf_cargado is None:
        with st.spinner("Cargando shapefile..."):
            try:
                with tempfile.TemporaryDirectory() as tmp_dir:
                    with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                        zip_ref.extractall(tmp_dir)
                    
                    shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                    if shp_files:
                        gdf = gpd.read_file(os.path.join(tmp_dir, shp_files[0]))
                        if gdf.crs is None:
                            gdf = gdf.set_crs('EPSG:4326')
                        st.session_state.gdf_cargado = gdf
                        st.success("‚úÖ Shapefile cargado correctamente")
                    else:
                        st.error("‚ùå No se encontr√≥ archivo .shp")
            except Exception as e:
                st.error(f"Error cargando shapefile: {e}")
    
    # Contenido principal
    if st.session_state.gdf_cargado is not None:
        gdf = st.session_state.gdf_cargado
        
        st.header("üìÅ DATOS CARGADOS")
        area_total = calcular_superficie(gdf).sum()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Pol√≠gonos", len(gdf))
        with col2:
            st.metric("√Årea Total", f"{area_total:.1f} ha")
        with col3:
            fuente = "SENTINEL-2" if ee_initialized else "SIMULADO"
            st.metric("Fuente de Datos", fuente)
        
        if st.button("üöÄ EJECUTAR AN√ÅLISIS", type="primary", use_container_width=True):
            config = {
                'fecha_imagen': fecha_imagen,
                'nubes_max': nubes_max,
                'tipo_pastura': tipo_pastura,
                'n_divisiones': n_divisiones
            }
            
            analisis_forrajero(gdf, config)
    
    else:
        # Pantalla de bienvenida
        st.header("üå± ANALIZADOR FORRAJERO")
        
        st.markdown("""
        ### üöÄ CARACTER√çSTICAS:
        
        ‚úÖ **An√°lisis forrajero** completo  
        ‚úÖ **Mapas interactivos** y reportes  
        ‚úÖ **Datos realistas** basados en patrones espaciales  
        ‚úÖ **C√°lculo de biomasa** y productividad  
        ‚úÖ **Recomendaciones** de manejo ganadero  
        
        ### üìã PARA COMENZAR:
        
        1. **Sube un shapefile** en formato ZIP
        2. **Configura los par√°metros** en el sidebar
        3. **Ejecuta el an√°lisis** forrajero
        
        ### üõ∞Ô∏è SENTINEL-2 REAL:
        
        Para datos satelitales en tiempo real:
        ```bash
        source ee_env/bin/activate
        python3 -c "import ee; ee.Authenticate()"
        ```
        """)

if __name__ == "__main__":
    main()
